"""
9095번 : 1,2,3 더하기
문제를 읽어보면 알겠지만 1,2,3을 이용해 주어지는 숫자가 나오도록 더하는 방법의 횟수를 물어본다
하나씩 경우의 수를 나열하면 규칙이 보이는데 각 숫자에 대한 덧셈의 경우의 수를 A[n]이라고 하면
1의 경우 1로 시작하여 1 = 1로 A[1] = 1,
2의 경우 A[1]로 시작하는 경우 + 1 결과(1 + 1 = 2)와 2로 시작하는 경우(2 = 2)를 더해서 A[2] = 2,
3의 경우 A[1]로 시작하는 경우 + 2(1 + 2 = 3)와 A[2]로 시작하는 경우 + 1 경로 결과(1+1+1=3, 2+1=3)와 3으로 시작하는 경우(3=3)을 더해서 1+2+1이기 때문에 A[3] = 4
4의경우 A[1]로 시작하는 경우 + 3 / A[2]로 시작하는 경우 + 2 / A[3]으로 시작하는 경우의 수 + 1, 이 3개의 연산의 합으로 가능해서
(1+3=4) / (1+1+2=4, 2+2=4) / (1+2+1=4, 1+1+1+1=4, 2+1+1 =4, 3+1=4) 로 각각 1+2+4 = 7이라서 A[4]=7이 된다
여기서 일종의 규칙을 하나 볼수 있는데 A[4] = A[1]+A[2]+A[3]꼴이며 점화식으로는 A[n] = A[n-1] + A[n-2] + A[n-3]임을 확인가능하다
또한 같은 패턴이 다음 문제의 연속적으로 등장하는 것을 보아 dynamic programming으로 풀면 된다
"""
# dynamic 숫자를 미리 다 연산하여 계산하였으며 index를 숫자랑 동일하게 사용하기위해 메모리는 1개 더 늘려서 생성
mem = [0 for x in range(12)]
mem[1], mem[2], mem[3] = 1, 2, 4    # 초기세팅
for i in range(4, len(mem)):
    mem[i] = mem[i - 1] + mem[i - 2] + mem[i - 3]   # 점화식

# 문제입력을 받아 출력 미리 연산된 값을 출력
rot = int(input())
for _ in range(rot):
    num = int(input())
    print(mem[num])